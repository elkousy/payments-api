// Code generated by mockery v1.0.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' from payments-api top folder to update this file and generate new ones.

package payments

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: p
func (_m *MockRepository) CreatePayment(p Payment) (string, error) {
	ret := _m.Called(p)

	var r0 string
	if rf, ok := ret.Get(0).(func(Payment) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Payment) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePayment provides a mock function with given fields: id
func (_m *MockRepository) DeletePayment(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListOfPayments provides a mock function with given fields:
func (_m *MockRepository) GetListOfPayments() ([]Payment, error) {
	ret := _m.Called()

	var r0 []Payment
	if rf, ok := ret.Get(0).(func() []Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: id
func (_m *MockRepository) GetPayment(id string) (Payment, error) {
	ret := _m.Called(id)

	var r0 Payment
	if rf, ok := ret.Get(0).(func(string) Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: id, p
func (_m *MockRepository) UpdatePayment(id string, p Payment) error {
	ret := _m.Called(id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, Payment) error); ok {
		r0 = rf(id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
